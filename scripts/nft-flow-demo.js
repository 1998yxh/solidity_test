const { ethers } = require("hardhat");

async function demonstrateNFTAuctionFlow() {
    console.log("üîç ÊºîÁ§∫ NFT ‰ªéÈì∏ÈÄ†Âà∞ÊãçÂçñÁöÑÂÆåÊï¥ÊµÅÁ®ã\n");

    const [owner, seller, bidder] = await ethers.getSigners();

    // 1. ÈÉ®ÁΩ≤ NFT ÂêàÁ∫¶
    const AuctionNFT = await ethers.getContractFactory("AuctionNFT");
    const nft = await AuctionNFT.deploy("Demo NFT", "DEMO", "https://demo.com/");
    console.log("üì¶ ÈÉ®ÁΩ≤ NFT ÂêàÁ∫¶:", nft.address);

    // 2. ÈÉ®ÁΩ≤ÁÆÄÂçïÁöÑÊãçÂçñÂπ≥Âè∞
    const NFTAuctionFactory = await ethers.getContractFactory("NFTAuctionFactory");
    const factory = await NFTAuctionFactory.deploy();
    
    const createTx = await factory.connect(owner).createAuctionPlatform();
    const receipt = await createTx.wait();
    const event = receipt.events?.find(e => e.event === 'AuctionPlatformCreated');
    const auctionPlatformAddress = event?.args?.auctionPlatform;

    const NFTAuctionPlatform = await ethers.getContractFactory("NFTAuctionPlatform");
    const auctionPlatform = NFTAuctionPlatform.attach(auctionPlatformAddress);
    console.log("üè≠ ÈÉ®ÁΩ≤ÊãçÂçñÂπ≥Âè∞:", auctionPlatformAddress);

    console.log("\n" + "=".repeat(60));
    console.log("Á¨¨‰∏ÄÈò∂ÊÆµÔºöNFT Èì∏ÈÄ†");
    console.log("=".repeat(60));

    // 3. Owner ‰∏∫ Seller Èì∏ÈÄ† NFT
    console.log("üé® Owner ‰∏∫ Seller Èì∏ÈÄ† NFT...");
    const mintTx = await nft.connect(owner).mint(seller.address, "demo-token-uri");
    const mintReceipt = await mintTx.wait();
    const mintEvent = mintReceipt.events?.find(e => e.event === 'NFTMinted');
    const tokenId = mintEvent?.args?.tokenId;

    console.log(`‚úÖ NFT Èì∏ÈÄ†ÊàêÂäüÔºÅ`);
    console.log(`   Token ID: ${tokenId}`);
    console.log(`   ÊâÄÊúâËÄÖ: ${seller.address}`);
    console.log(`   URI: demo-token-uri`);

    // 4. È™åËØÅÊâÄÊúâÊùÉ
    const nftOwner = await nft.ownerOf(tokenId);
    console.log(`\nüîç È™åËØÅ NFT ÊâÄÊúâÊùÉ:`);
    console.log(`   NFT ${tokenId} ÁöÑÊâÄÊúâËÄÖ: ${nftOwner}`);
    console.log(`   Seller Âú∞ÂùÄ: ${seller.address}`);
    console.log(`   ÊâÄÊúâÊùÉÂåπÈÖç: ${nftOwner === seller.address ? '‚úÖ' : '‚ùå'}`);

    console.log("\n" + "=".repeat(60));
    console.log("Á¨¨‰∫åÈò∂ÊÆµÔºöÊéàÊùÉÊãçÂçñÂπ≥Âè∞");
    console.log("=".repeat(60));

    // 5. Ê£ÄÊü•ÊéàÊùÉÁä∂ÊÄÅ (ÂàõÂª∫ÊãçÂçñÂâç)
    let isApprovedForAll = await nft.isApprovedForAll(seller.address, auctionPlatform.address);
    let approvedAddress = await nft.getApproved(tokenId);
    
    console.log("üîê ÊéàÊùÉÁä∂ÊÄÅÊ£ÄÊü• (ÊéàÊùÉÂâç):");
    console.log(`   ÊâπÈáèÊéàÊùÉ (isApprovedForAll): ${isApprovedForAll ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Âçï‰∏™ÊéàÊùÉ (getApproved): ${approvedAddress === auctionPlatform.address ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ÂΩìÂâçÂçï‰∏™ÊéàÊùÉÂú∞ÂùÄ: ${approvedAddress}`);

    // 6. Seller ÊéàÊùÉÊãçÂçñÂπ≥Âè∞
    console.log("\nüîì Seller ÊéàÊùÉÊãçÂçñÂπ≥Âè∞ÁÆ°ÁêÜÊâÄÊúâ NFT...");
    await nft.connect(seller).setApprovalForAll(auctionPlatform.address, true);
    
    // 7. È™åËØÅÊéàÊùÉÊàêÂäü
    isApprovedForAll = await nft.isApprovedForAll(seller.address, auctionPlatform.address);
    console.log(`‚úÖ ÊéàÊùÉÊàêÂäüÔºÅÊâπÈáèÊéàÊùÉÁä∂ÊÄÅ: ${isApprovedForAll ? '‚úÖ' : '‚ùå'}`);

    console.log("\n" + "=".repeat(60));
    console.log("Á¨¨‰∏âÈò∂ÊÆµÔºöÂàõÂª∫ÊãçÂçñ");
    console.log("=".repeat(60));

    // 8. ÂàõÂª∫ÊãçÂçñ
    console.log("üèÜ Seller ÂàõÂª∫ÊãçÂçñ...");
    
    // ËÆ∞ÂΩïÊãçÂçñÂâçÁöÑ NFT ‰ΩçÁΩÆ
    const ownerBeforeAuction = await nft.ownerOf(tokenId);
    console.log(`NFT ÊãçÂçñÂâç‰ΩçÁΩÆ: ${ownerBeforeAuction} (Seller)`);
    
    const auctionTx = await auctionPlatform.connect(seller).createAuction(
        24 * 60 * 60, // 24Â∞èÊó∂
        ethers.utils.parseEther("1"), // Ëµ∑Âßã‰ª∑Ê†º 1 ETH
        ethers.utils.parseEther("2"), // ‰øùÁïô‰ª∑Ê†º 2 ETH
        nft.address,
        tokenId
    );
    
    const auctionReceipt = await auctionTx.wait();
    const auctionEvent = auctionReceipt.events?.find(e => e.event === 'AuctionCreated');
    const auctionId = auctionEvent?.args?.auctionId || auctionEvent?.args?.[0];

    console.log(`‚úÖ ÊãçÂçñÂàõÂª∫ÊàêÂäüÔºÅ`);
    console.log(`   ÊãçÂçñ ID: ${auctionId}`);
    
    // 9. È™åËØÅ NFT ËΩ¨Áßª
    const ownerAfterAuction = await nft.ownerOf(tokenId);
    console.log(`\nüîÑ NFT ËΩ¨ÁßªÈ™åËØÅ:`);
    console.log(`   ÊãçÂçñÂâçÊâÄÊúâËÄÖ: ${ownerBeforeAuction} (Seller)`);
    console.log(`   ÊãçÂçñÂêéÊâÄÊúâËÄÖ: ${ownerAfterAuction} (ÊãçÂçñÂêàÁ∫¶)`);
    console.log(`   NFT ÊàêÂäüÊâòÁÆ°: ${ownerAfterAuction === auctionPlatform.address ? '‚úÖ' : '‚ùå'}`);

    console.log("\n" + "=".repeat(60));
    console.log("Á¨¨ÂõõÈò∂ÊÆµÔºöÊü•ÁúãÊãçÂçñÁä∂ÊÄÅ");
    console.log("=".repeat(60));

    // 10. Êü•ÁúãÊãçÂçñËØ¶ÊÉÖ
    const auction = await auctionPlatform.auctions(auctionId);
    console.log("üìä ÊãçÂçñËØ¶ÊÉÖ:");
    console.log(`   ÂçñÂÆ∂: ${auction.seller}`);
    console.log(`   NFT ÂêàÁ∫¶: ${auction.nftContract}`);
    console.log(`   Token ID: ${auction.tokenId}`);
    console.log(`   Ëµ∑Âßã‰ª∑Ê†º: ${ethers.utils.formatEther(auction.startPrice)} ETH`);
    console.log(`   ‰øùÁïô‰ª∑Ê†º: ${ethers.utils.formatEther(auction.reservePrice)} ETH`);
    console.log(`   ÊãçÂçñÁä∂ÊÄÅ: ${auction.ended ? 'Â∑≤ÁªìÊùü' : 'ËøõË°å‰∏≠'}`);

    console.log("\nüéâ ÊµÅÁ®ãÊºîÁ§∫ÂÆåÊàêÔºÅ");
    console.log("üìù ÊÄªÁªì:");
    console.log("   1. ‚úÖ Owner Èì∏ÈÄ† NFT Áªô Seller");
    console.log("   2. ‚úÖ Seller ÊéàÊùÉÊãçÂçñÂπ≥Âè∞ÁÆ°ÁêÜ NFT");
    console.log("   3. ‚úÖ Seller ÂàõÂª∫ÊãçÂçñ");
    console.log("   4. ‚úÖ NFT Ëá™Âä®ËΩ¨ÁßªÂà∞ÊãçÂçñÂêàÁ∫¶ÊâòÁÆ°");
    console.log("   5. ‚úÖ ÊãçÂçñÂºÄÂßãÔºåÁ≠âÂæÖÂá∫‰ª∑");

    return {
        nft: nft.address,
        auctionPlatform: auctionPlatform.address,
        tokenId: tokenId.toString(),
        auctionId: auctionId.toString()
    };
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨
if (require.main === module) {
    demonstrateNFTAuctionFlow()
        .then((result) => {
            console.log("\nüìã ÂêàÁ∫¶Âú∞ÂùÄÊ±áÊÄª:");
            console.log(`   NFT ÂêàÁ∫¶: ${result.nft}`);
            console.log(`   ÊãçÂçñÂπ≥Âè∞: ${result.auctionPlatform}`);
            console.log(`   Token ID: ${result.tokenId}`);
            console.log(`   ÊãçÂçñ ID: ${result.auctionId}`);
            process.exit(0);
        })
        .catch((error) => {
            console.error("‚ùå ÊºîÁ§∫Â§±Ë¥•:", error);
            process.exit(1);
        });
}

module.exports = { demonstrateNFTAuctionFlow };