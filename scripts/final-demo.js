const { ethers } = require("hardhat");

async function main() {
    console.log("üöÄ NFT ÊãçÂçñÂπ≥Âè∞ÂÆåÊï¥ÊºîÁ§∫ÂºÄÂßã...\n");

    const [owner, seller, bidder1, bidder2] = await ethers.getSigners();
    console.log("üë• Ëé∑ÂèñÊµãËØïË¥¶Êà∑:");
    console.log("   Owner:", owner.address);
    console.log("   Seller:", seller.address);
    console.log("   Bidder1:", bidder1.address);
    console.log("   Bidder2:", bidder2.address);
    console.log();

    // 1. ÈÉ®ÁΩ≤ÊâÄÊúâÂêàÁ∫¶
    console.log("üì¶ ÈÉ®ÁΩ≤ÊâÄÊúâÂêàÁ∫¶...");
    
    // ÈÉ®ÁΩ≤ NFT ÂêàÁ∫¶
    const AuctionNFT = await ethers.getContractFactory("AuctionNFT");
    const nft = await AuctionNFT.deploy("Auction NFT", "ANFT", "https://ipfs.io/ipfs/");
    console.log("‚úÖ NFT ÂêàÁ∫¶:", nft.address);

    // ÈÉ®ÁΩ≤‰ª∑Ê†ºÈ¢ÑË®ÄÊú∫
    const MockPriceFeed = await ethers.getContractFactory("MockPriceFeed");
    const ethPriceFeed = await MockPriceFeed.deploy(8, "ETH/USD", 1, 200000000000); // $2000
    const usdtPriceFeed = await MockPriceFeed.deploy(8, "USDT/USD", 1, 100000000); // $1
    console.log("‚úÖ ETH ‰ª∑Ê†ºÈ¢ÑË®ÄÊú∫:", ethPriceFeed.address, "($2000)");
    console.log("‚úÖ USDT ‰ª∑Ê†ºÈ¢ÑË®ÄÊú∫:", usdtPriceFeed.address, "($1)");

    // ÈÉ®ÁΩ≤ÊµãËØï‰ª£Â∏Å
    const MyToken = await ethers.getContractFactory("MyToken");
    const usdt = await MyToken.deploy(ethers.utils.parseEther("1000000"));
    console.log("‚úÖ USDT ‰ª£Â∏Å:", usdt.address);

    // ÈÉ®ÁΩ≤ÊãçÂçñÂ∑•ÂéÇ
    const NFTAuctionFactory = await ethers.getContractFactory("NFTAuctionFactory");
    const factory = await NFTAuctionFactory.deploy();
    console.log("‚úÖ ÊãçÂçñÂ∑•ÂéÇ:", factory.address);
    console.log();

    // 2. ÈÖçÁΩÆ‰ª∑Ê†ºÈ¢ÑË®ÄÊú∫
    console.log("‚öôÔ∏è ÈÖçÁΩÆ‰ª∑Ê†ºÈ¢ÑË®ÄÊú∫...");
    await factory.addDefaultPriceFeed(ethers.constants.AddressZero, ethPriceFeed.address);
    await factory.addDefaultPriceFeed(usdt.address, usdtPriceFeed.address);
    console.log("‚úÖ ‰ª∑Ê†ºÈ¢ÑË®ÄÊú∫ÈÖçÁΩÆÂÆåÊàê");
    console.log();

    // 3. ÂàõÂª∫ÊãçÂçñÂπ≥Âè∞
    console.log("üè≠ ÂàõÂª∫ÊãçÂçñÂπ≥Âè∞...");
    const createTx = await factory.connect(owner).createAuctionPlatform();
    const receipt = await createTx.wait();
    const event = receipt.events?.find(e => e.event === 'AuctionPlatformCreated');
    const auctionPlatformAddress = event?.args?.auctionPlatform;

    const NFTAuctionPlatform = await ethers.getContractFactory("NFTAuctionPlatform");
    const auctionPlatform = NFTAuctionPlatform.attach(auctionPlatformAddress);
    console.log("‚úÖ ÊãçÂçñÂπ≥Âè∞:", auctionPlatformAddress);
    console.log();

    // 4. Èì∏ÈÄ† NFT
    console.log("üé® Èì∏ÈÄ† NFT...");
    await nft.connect(owner).mint(seller.address, "QmTest1");
    await nft.connect(owner).mint(seller.address, "QmTest2");
    console.log("‚úÖ ‰∏∫ seller Èì∏ÈÄ†‰∫Ü 2 ‰∏™ NFT (tokenId: 1, 2)");
    
    // ÊéàÊùÉÊãçÂçñÂπ≥Âè∞
    await nft.connect(seller).setApprovalForAll(auctionPlatform.address, true);
    console.log("‚úÖ Seller ÊéàÊùÉÊãçÂçñÂπ≥Âè∞ÁÆ°ÁêÜ NFT");
    console.log();

    // 5. ÂáÜÂ§áÊµãËØï‰ª£Â∏Å
    console.log("üí∞ ÂàÜÂèëÊµãËØï‰ª£Â∏Å...");
    await usdt.transfer(bidder1.address, ethers.utils.parseEther("10000"));
    await usdt.transfer(bidder2.address, ethers.utils.parseEther("10000"));
    await usdt.connect(bidder1).approve(auctionPlatform.address, ethers.utils.parseEther("10000"));
    await usdt.connect(bidder2).approve(auctionPlatform.address, ethers.utils.parseEther("10000"));
    console.log("‚úÖ Áªô bidder1 Âíå bidder2 ÂêÑÂàÜÂèë 10000 USDT");
    console.log("‚úÖ Bidders ÊéàÊùÉÊãçÂçñÂπ≥Âè∞‰ΩøÁî® USDT");
    console.log();

    // 6. ÂàõÂª∫ÊãçÂçñ
    console.log("üèÜ ÂàõÂª∫ÊãçÂçñ...");
    const auctionTx1 = await auctionPlatform.connect(seller).createAuction(
        24 * 60 * 60, // 24Â∞èÊó∂
        ethers.utils.parseEther("100"), // Ëµ∑Âßã‰ª∑Ê†º $100
        ethers.utils.parseEther("200"), // ‰øùÁïô‰ª∑Ê†º $200
        nft.address,
        1
    );
    await auctionTx1.wait();
    console.log("‚úÖ ÂàõÂª∫ÊãçÂçñ #1: NFT tokenId=1, Ëµ∑Âßã‰ª∑=$100, ‰øùÁïô‰ª∑=$200");

    const auctionTx2 = await auctionPlatform.connect(seller).createAuction(
        12 * 60 * 60, // 12Â∞èÊó∂
        ethers.utils.parseEther("50"), // Ëµ∑Âßã‰ª∑Ê†º $50
        ethers.utils.parseEther("100"), // ‰øùÁïô‰ª∑Ê†º $100
        nft.address,
        2
    );
    await auctionTx2.wait();
    console.log("‚úÖ ÂàõÂª∫ÊãçÂçñ #2: NFT tokenId=2, Ëµ∑Âßã‰ª∑=$50, ‰øùÁïô‰ª∑=$100");
    console.log();

    // 7. ETH Âá∫‰ª∑ÊºîÁ§∫
    console.log("üíé ETH Âá∫‰ª∑ÊºîÁ§∫...");
    
    // bidder1 ‰ΩøÁî® ETH Âá∫‰ª∑ÊãçÂçñ1Ôºö0.06 ETH = $120
    await auctionPlatform.connect(bidder1).placeBidWithETH(1, { 
        value: ethers.utils.parseEther("0.06") 
    });
    console.log("‚úÖ Bidder1 Áî® 0.06 ETH ($120) ÂØπÊãçÂçñ #1 Âá∫‰ª∑");

    // bidder2 ‰ΩøÁî® ETH Âá∫‰ª∑ÊãçÂçñ1Ôºö0.08 ETH = $160
    await auctionPlatform.connect(bidder2).placeBidWithETH(1, { 
        value: ethers.utils.parseEther("0.08") 
    });
    console.log("‚úÖ Bidder2 Áî® 0.08 ETH ($160) ÂØπÊãçÂçñ #1 Âá∫‰ª∑");
    console.log();

    // 8. ERC20 Âá∫‰ª∑ÊºîÁ§∫
    console.log("ü™ô ERC20 Âá∫‰ª∑ÊºîÁ§∫...");
    
    // bidder1 ‰ΩøÁî® USDT Âá∫‰ª∑ÊãçÂçñ2Ôºö80 USDT
    await auctionPlatform.connect(bidder1).placeBidWithToken(2, usdt.address, ethers.utils.parseEther("80"));
    console.log("‚úÖ Bidder1 Áî® 80 USDT ÂØπÊãçÂçñ #2 Âá∫‰ª∑");

    // bidder2 ‰ΩøÁî® USDT Âá∫‰ª∑ÊãçÂçñ2Ôºö120 USDT
    await auctionPlatform.connect(bidder2).placeBidWithToken(2, usdt.address, ethers.utils.parseEther("120"));
    console.log("‚úÖ Bidder2 Áî® 120 USDT ÂØπÊãçÂçñ #2 Âá∫‰ª∑");
    console.log();

    // 9. Êü•ÁúãÊãçÂçñÁä∂ÊÄÅ
    console.log("üìä Êü•ÁúãÊãçÂçñÁä∂ÊÄÅ...");
    
    const auction1 = await auctionPlatform.getAuction(1);
    const auction2 = await auctionPlatform.getAuction(2);
    
    console.log("ÊãçÂçñ #1 Áä∂ÊÄÅ:");
    console.log("  - ÊúÄÈ´òÂá∫‰ª∑ËÄÖ:", auction1.highestBidder);
    console.log("  - ÊúÄÈ´òÂá∫‰ª∑:", ethers.utils.formatEther(auction1.highestBid), "USD");
    console.log("  - Âá∫‰ª∑‰ª£Â∏Å:", auction1.bidToken === ethers.constants.AddressZero ? "ETH" : "ERC20");
    console.log("  - ÊòØÂê¶Ê¥ªË∑É:", await auctionPlatform.isAuctionActive(1));
    
    console.log("\nÊãçÂçñ #2 Áä∂ÊÄÅ:");
    console.log("  - ÊúÄÈ´òÂá∫‰ª∑ËÄÖ:", auction2.highestBidder);
    console.log("  - ÊúÄÈ´òÂá∫‰ª∑:", ethers.utils.formatEther(auction2.highestBid), "USD");
    console.log("  - Âá∫‰ª∑‰ª£Â∏Å:", auction2.bidToken === ethers.constants.AddressZero ? "ETH" : "USDT");
    console.log("  - ÊòØÂê¶Ê¥ªË∑É:", await auctionPlatform.isAuctionActive(2));
    console.log();

    // 10. Â∑•ÂéÇÂäüËÉΩÊºîÁ§∫
    console.log("üè≠ Â∑•ÂéÇÂäüËÉΩÊºîÁ§∫...");
    
    // Âè¶‰∏Ä‰∏™Áî®Êà∑ÂàõÂª∫ÊãçÂçñÂπ≥Âè∞
    const createTx2 = await factory.connect(bidder1).createAuctionPlatform();
    const receipt2 = await createTx2.wait();
    const event2 = receipt2.events?.find(e => e.event === 'AuctionPlatformCreated');
    const auctionPlatformAddress2 = event2?.args?.auctionPlatform;
    console.log("‚úÖ Bidder1 ÂàõÂª∫‰∫ÜÊñ∞ÁöÑÊãçÂçñÂπ≥Âè∞:", auctionPlatformAddress2);

    // Ëé∑ÂèñÁî®Êà∑ÂàõÂª∫ÁöÑÂπ≥Âè∞ÂàóË°®
    const userPlatforms = await factory.getUserAuctions(owner.address);
    console.log("‚úÖ Owner ÂàõÂª∫ÁöÑÂπ≥Âè∞Êï∞Èáè:", userPlatforms.length);
    
    const bidder1Platforms = await factory.getUserAuctions(bidder1.address);
    console.log("‚úÖ Bidder1 ÂàõÂª∫ÁöÑÂπ≥Âè∞Êï∞Èáè:", bidder1Platforms.length);
    console.log();

    // 11. ‰ª∑Ê†ºÈ¢ÑË®ÄÊú∫ÂäüËÉΩÊºîÁ§∫
    console.log("üìà ‰ª∑Ê†ºÈ¢ÑË®ÄÊú∫ÂäüËÉΩÊºîÁ§∫...");
    
    const ethUsdValue = await auctionPlatform.getTokenPriceInUSD(ethers.constants.AddressZero, ethers.utils.parseEther("1"));
    const usdtUsdValue = await auctionPlatform.getTokenPriceInUSD(usdt.address, ethers.utils.parseEther("100"));
    
    console.log("‚úÖ 1 ETH =", ethers.utils.formatEther(ethUsdValue), "USD");
    console.log("‚úÖ 100 USDT =", ethers.utils.formatEther(usdtUsdValue), "USD");
    console.log();

    console.log("üéâ ÊºîÁ§∫ÂÆåÊàêÔºÅÊâÄÊúâÂäüËÉΩÊ≠£Â∏∏Â∑•‰Ωú:");
    console.log("   ‚úÖ NFT Èì∏ÈÄ†ÂíåÁÆ°ÁêÜ");
    console.log("   ‚úÖ Â§öÁßçÂá∫‰ª∑ÊñπÂºè (ETH/ERC20)");
    console.log("   ‚úÖ ‰ª∑Ê†ºÈ¢ÑË®ÄÊú∫ÈõÜÊàê");
    console.log("   ‚úÖ Â∑•ÂéÇÊ®°ÂºèÂàõÂª∫Âπ≥Âè∞");
    console.log("   ‚úÖ ÊãçÂçñÁä∂ÊÄÅÁÆ°ÁêÜ");
    console.log("   ‚úÖ ÂÆâÂÖ®ÊÄßÊ£ÄÊü•");
    console.log();
    console.log("üìã ÈÉ®ÁΩ≤Âú∞ÂùÄÊ±áÊÄª:");
    console.log("   NFT ÂêàÁ∫¶:", nft.address);
    console.log("   USDT ‰ª£Â∏Å:", usdt.address);
    console.log("   ÊãçÂçñÂ∑•ÂéÇ:", factory.address);
    console.log("   ÊãçÂçñÂπ≥Âè∞1:", auctionPlatformAddress);
    console.log("   ÊãçÂçñÂπ≥Âè∞2:", auctionPlatformAddress2);
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå ÊºîÁ§∫Â§±Ë¥•:", error);
        process.exit(1);
    });